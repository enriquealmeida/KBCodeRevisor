======OBJECT = PSolxMail.Procedure ===  Solicitudes por  Mail=====

=== RULES ===


=== PROCEDURE SOURCE ===
//&HayProcesos=IsProcessRunning('apsolxmail')
//if &HayProcesos = 'S'
//	msg('Ya hay un proceso apSolxMail',status) //Call() //&err=shell('pSolxMail.exe')
//	return
//endif


&ParPOP3AttachDir = '.\Attachs\' 

&ParSMTPHost = PMTParChr('POP3HOST')	//pop.gmail.com
&ParPOP3User = PMTParChr('MAILSOLI')	//'solicitudes@concepto.com.uy'
&ParPOP3Pass = PMTParChr('PWDSOLI')

&StringIdSol = 'Solicitud:#'

&pop3.AttachDir = &ParPOP3AttachDir 
&pop3.newMessages = 0       // para que traiga todos los mensajes
&pop3.Host = trim(&ParSMTPHost)   
&pop3.Port = 995
&pop3.Secure=1
&pop3.UserName = trim(&ParPOP3User)   
&pop3.Password = trim(&ParPOP3Pass)   

  //Si no existe el directorio para los attach lo creo.
  &dir.Source= &ParPOP3AttachDir 
  if not &dir.Exists()
     &dir.Create()
	 if &dir.ErrCode <> 0
        msg('ERRor AL CREAR DIRECTorIO DE ADJUNTOS: ' + str(&dir.ErrCode) + ' ' + &dir.ErrDescription, status)
	endif
	
  endif

msg( format('%1 Leo mensajes a procesar',now(),&cant), status)
&Auxiliar=1
do while &Auxiliar = 1
      &ret = &pop3.Login()
      &cant = &pop3.Count
      
      // msg( format('%1 Cantidad de mensajes a procesar: %2 ',now(),&cant), status)
	  
	  ActualizoSolxMailDateTime()

	//  &Err = sleep(90)
       
       for &i = 1 to &cant
           &err = &pop3.Receive(&mensaje)
           
           if &err <> 0
               msg('Error al recibir: ' + trim(str(&err)) + ' ' + &pop3.ErrDescription, status)
               exit
           endif
           //&err=&pop3.MarkAsRead
           //&pop3.MarkAsRead()
           // msg('Mensaje:' + &pop3.ErrCode + ' ' + &pop3.ErrCode,status)
           Do 'Buscoresponsable'
 
		   Do 'BuscoProyecto'
msg('Post BuscoProyecto:'+&PryId, status)		   
		   if &PryId.IsEmpty()
	           Do 'buscoClienteYprimerProyectoActivo'
		   endif
msg('Post BuscoClienteYprimerProyectoActivo:'+&PryId, status)	   
	   	   do 'BuscoSistema'
		   
	       &HayError='N'
           if StrSearch(&mensaje.Subject,&StringIdSol) = 0 //NO ES MAIL DE METRCIAS REENVIADO
               Do 'GraboSolicitud'
           else
               Do 'ActualizoSolicitud'
           endif
		   
		  // do 'CalculoEnvioId'
           do 'GraboHoras'
		   
           Do 'ProcesoAdjuntos'
           if &Hayerror='N'
               do 'EnvioPorMail'
           else
               do 'EnvioErrorPorMail'
           endif
           &pop3.Delete()
           
       endfor
    
       &pop3.Logout()
	
    //endif
	
    &ret = sleep(10)
	
	if (ExisteArchivo('instalando.FULLCYCLE'))
		return
	endif
	
enddo


Sub 'Buscoresponsable'
    &num=strsearch(&mensaje.From.Address,'@') - 1
    &SegUsr=upper(Substr(&mensaje.From.Address, 1, &num))
 
    //Busco quien CorRIGE Y QUIEN SIGUE
    for each 
        where          RspId=&SegUsr
    when none
        &SegUsr='*NADIE'
    endfor
	
    &CrrUsr='*NADIE' 
     for each 
        where          RspActivo=true
           if strsearch(&mensaje.Subject.ToUpper(),RspId.Trim()) > 0
               &CrrUsr=RspId
               exit
           endif
      endfor
	
	
EndSub

Sub 'GraboSolicitud'
    &Solicitudes = new() 

    msg( '  Procesando mensaje: ' + &mensaje.Subject , status)
	msg( format('cliente %1 proyecto %2 sistema %3', &CliId, &PryId, &SisId), status )
//    &Solicitudes.CliId=&CliId
	&Solicitudes.PryId = &PryId
    //Usuarios
    &Solicitudes.SegUsr=&Segusr
    &Solicitudes.CrrUsr=&CrrUsr 
    &Solicitudes.IngUsr=&mensaje.From.Address
    &Solicitudes.PrbUsr=&SegUsr
	
    &Solicitudes.PrbFch=today()
    &Solicitudes.PrbFchIng=today()
       
    &Solicitudes.PrbDsc=&mensaje.Subject
    &Solicitudes.PrbTxt =  &mensaje.Text.ReplaceRegEx('<[^>]+>','')

    &Solicitudes.PrbTxt += newline()  + ' Ingresado por mail: Cliente: ' + &CliId + ' Sistema : ' + &SisId + ' Mail: ' + &mensaje.From.Address
	//&Solicitudes.PrbTxtCam = &mensaje.HTMLText
	
    &solicitudes.PrbSts=DMPrbSts.ING
    &Solicitudes.SisId=&sisId
    &Solicitudes.PrbTpo='OTR'
    &Solicitudes.SolOriId='MAIL'
 
    &Solicitudes.Save()
    if &Solicitudes.Fail()
        Do 'ProcessError'
        &HayError='S'
		&PrbId=0
    else
       // &PrbiD= &Solicitudes.PrbId -1
	   &PrbId = &Solicitudes.PrbId
        msg('AGREGUE LA SOLICITUD: ' + trim(str(&PrbId)) + ' Cliente: ' + &CliId + ' Mail: ' + &mensaje.From.Address  , status)
    endif
    commit
	
EndSub

Sub 'BuscoProyecto'
	&PryId.SetEmpty()
	for each
		if Strsearch(Upper(&mensaje.Subject), trim(PryId) ,1) > 0
			&PryId = PryId
			&CliId = CliId
			exit
		endif
	endfor
EndSub

Sub 'buscoClienteYprimerProyectoActivo'
	//Si no tiene el nombre de algun cliente en el Subject, lo mando a CONCEPTO. 
	&CliId='CONCEPTO'
	&PryId='CONCEPTO'
	&SisId='MT'
	
	for each order CliId
	where          CliId <> 'SIGE'
	where          CliActivo = true
		if  Strsearch(Upper(&mensaje.Subject), trim(CliId) ,1) > 0
			&CliId=CliId
			exit
		endif
	endfor        
 
	for each 
	where          CliId=&CliId 
	where          PryAct=DMPryAct.Activo
		&PryId=PryId
		exit
	endfor
EndSub

Sub 'BuscoSistema'
	
	for each order (PrbId)
	where          PryId = &PryId and (not SisId.IsEmpty())
		&SisId=SisId
		exit
    when none //No hay solicitudes de ese cliente
		for each order (PrbId)
		where          CliId=&CliId and (not SisId.IsEmpty())
			&SisId=SisId
			exit
		when None
         	//Busco en MTSisCli, el primer sistema del cliente
			for each 
				where          CliId=&CliId //Busco en MTSisCli
				&SisId=SisId
				Exit
			when none
				new 
					CliId=&CliId
					SisId=&SisId
				endnew		   
			endfor
		endfor
		commit

  endfor

EndSub

 Sub 'ProcesoAdjuntos'
      &destino='\PrbFiles\files_'+trim(str(&PrbId))
      &dir2.Source= '..' + &destino 
        
      if not &dir2.Exists()
         &dir2.Create()
      endif
     
     for &file in &dir.GetFiles()
        &archivo = &file.GetAbsoluteName()
        &archivodestino=trim(&dir2.GetAbsoluteName())+ '\' + &file.GetName()
        
        msg('    -> Procesando adjunto: ' + &archivo /* + ' copio a ' + &archivodestino */ , status)
        
        &file.Copy(&archivodestino) 
		&PARURLBASE = PMTParChr('PARURLBASE')
        new 
	         PrbId= &PrbId
	         PrbDocId= PCNumera('PRBDOCID')
	         PrbDocDsc=&file.GetName()
			 PrbDocBlob=&archivo
	         PrbDocURL=&PARURLBASE+trim(&destino) + '/'+PrbDocDsc
	        when duplicate
           msg('Duplicado al grabar PrbDoc ' + str(PrbId) + ' ' + str(PrbDocId), status)
           &HayError='S'
        endnew
		
//		//Si el archivo es xpz agrego un envio. 
//		&NombreArchivo=&file.getName().ToUpper()
//		if StrSearch(&NombreArchivo,'.XPZ',1) > 1
//		   msg(format('Extraigo %1 en %2 y %3',&archivo,&PrbId,&EnvioId),status)
//		   ExtraigoObjetosDesdeXPZ.Call(&PrbId,&EnvioId,&archivo)
//		endif
		
        if &file.Exists()
            &file.Delete()
        endif
    endfor
    commit  
  EndSub

  Sub 'ActualizoSolicitud'
       &inicio= StrSearch(&mensaje.Subject,&StringIdSol) +  &StringIdSol.Length()
       &fin = StrSearch(&mensaje.Subject,'#',&inicio)
       &PrbId=val(Substr(&mensaje.Subject,&Inicio,&fin))
    //   msg(&Mensaje.Subject + ' extraje ' + str(&PrbId),status)
       for each
          where          PrbId=&PrbId
          where          PrbEstadoActivo=true
             PrbTxt=PrbTxt + newline() + &mensaje.Text  + newline() + ' Agregado por mail: Cliente: ' + &CliId + ' Mail: ' + &mensaje.From.Address
         when none 
             &HayError='S'
       endfor
	
       msg('ACTUALICE LA SOLICITUD: ' + trim(str(&PrbId)) + ' Cliente: ' + &CliId + ' Mail: ' + &mensaje.From.Address  , status)
  EndSub

  Sub 'EnvioPorMail'
    //Busco direccion de mail del cliente para enviarle copia de la solicitud
    &CliMailSol.SetEmpty()
    for each 
        where          CliId=&CliId  
        &CliMailSol=CliMailSol
    endfor
     
   EnvioSolicitudPorMail.Call(&PryId, &PrbId, &mensaje.From.Address , &CliMailSol, '','')
   msg('Envio por mail: ' + trim(str(&PrbId)) + ' a ' + &mensaje.From.Address + ' y ' + &CliMailSol , status) 
   msg(' ',status)
EndSub

  Sub 'ProcessError'
    &messages = &Solicitudes.GetMessages()
    for &Message in &Messages
           msg('ERRor: ' + &Message.Id + '-' + &Message.Description ,status)
           msg('ERRor: ' + &mensaje.From.Address +'-'+ &mensaje.From.Name + '-' + &mensaje.Subject , status)
           msg('ERRor: sistema: ' + &SisId + ' proyecto: ' + &PryId, status)
    endfor
    &HayError='S'
      rollback
  EndSub

  Sub 'EnvioErrorPorMail'
      //&MailMessage.To.new('awolff@concepto.com.uy','awolff@concepto.com.uy')
	  //&MailMessage.To.new('ealmeida@concepto.com.uy','ealmeida@concepto.com.uy')
	  &MailMessage.Subject='Error en solicitud ' + &PrbId.ToString()
	//  EnvioMail3.Call(&MailMessage,&msgError)
	  msg(&msgError,status)
  EndSub

//Sub 'CalculoEnvioId'
//	&EnvioId= -1
//	//Calculo en EnnvioId
//	for each (EnvioId)
//	   where          PrbId=&PrbId
//	  // &EnvioId=MaxUltNroEnvio
//	    &EnvioId = EnvioId 
//		exit
//	endfor
//    &EnvioId = &EnvioId + 1
//   
//EndSub	

Sub 'GraboHoras'
	&msg=AgregoHorasDesdeSubject(&Mensaje.Subject,&SegUsr,&PryId,&PrbId)                
    msg(&msg,status) 
	msg(&msg)
EndSub	


====== PROPERTIES =======
Name -> PSolxMail
Description ->  Solicitudes por  Mail
IsMain -> True
CALL_PROTOCOL -> CLINE
AppLocation -> BATCH
FolderType -> c88fffcd-b6f8-0000-8fec-00b5497e2117
FolderId -> 8
ObjectVisibility -> Private
IsDefault -> False
