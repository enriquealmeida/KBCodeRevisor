======OBJECT = Licencia.Transaction === Licencia por responsable =====

=== RULES ===
/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */
parm(in:&Mode, in:&RspLicId);

NoAccept(RspAutId);
RspLicId = &RspLicId if not &RspLicId.IsEmpty();
noaccept(RspLicId) if not &RspLicId.IsEmpty();
noprompt(RspLicId);

RspId = &Insert_RspId if &Mode = TrnMode.Insert and not &Insert_RspId.IsEmpty();
noaccept(RspId) if &Mode = TrnMode.Insert and not &Insert_RspId.IsEmpty();
RspAutId = &Insert_RspAutId if &Mode = TrnMode.Insert and not &Insert_RspAutId.IsEmpty();
AusTpoId = &Insert_AusTpoId if &Mode = TrnMode.Insert and not &Insert_AusTpoId.IsEmpty();
noaccept(AusTpoId) if &Mode = TrnMode.Insert and not &Insert_AusTpoId.IsEmpty();
/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

RspLicId = udp(PCNumera ,'LICENCIA' ) IF null(&RspLicId ) and after(confirm)  and  Insert ;

RspId = upper(userid()) if RspId.IsEmpty() and &ModoLicencias = ModoLicencias.MILICENCIA;
NoAccept(RspId) if &ModoLicencias = ModoLicencias.MILICENCIA;

default(LicEst, EstadoLicencia.Ingresada);
LicEst.Enabled = 0 if &ModoLicencias = ModoLicencias.MILICENCIA ;	// quizas podria extenderse tambien a modo insert en general

// si la ausencia ya estaba autorizada y se modifica la vuelvo a ingresada
LicEst = EstadoLicencia.Ingresada if update 
	and old(LicEst) = EstadoLicencia.Autorizada and (&RspId <> RspId or &vLicFecFinAux <> LicFecFin or &vLicFecIniAux <> LicFecIni) 
	and not (AusTipoLiquidacion = false or LicTpo = DMLicTpo.Generada or LicTpo=DMLicTpo.Liquidada ) ON AfterValidate;

LicEst = EstadoLicencia.Ingresada	
	if insert and LicTpo = DMLicTpo.Tomada and AusTpoId = DMAusTpoId.Licencia ;
noaccept(LicEst) if insert and LicTpo = DMLicTpo.Tomada and AusTpoId = DMAusTpoId.Licencia ;
LicEst = EstadoLicencia.Autorizada 	if (AusTipoLiquidacion = false or LicTpo = DMLicTpo.Generada or LicTpo=DMLicTpo.Liquidada) ;
noaccept(LicEst) 					if (AusTipoLiquidacion = false or LicTpo = DMLicTpo.Generada or LicTpo=DMLicTpo.Liquidada) ;

&RspId = old(RspId);
&vLicFecIniAux = old(LicFecIni);
&vLicFecFinAux = old(LicFecFin);


LicDias = - CalculoDiasHabilesEntreFechasSinConsiderarFeriadosEspeciales(LicFecIni, LicFecFin) if after(LicFecFin ) and LicTpo<>DMLicTpo.Generada;
//LicDias =- &DiasHabiles IF after(LicFecFin ) ;

/*
&DiasHabiles = CalculoDiasHabilesEntreFechasSinConsiderarFeriadosEspeciales(LicFecIni, LicFecFin) if after(LicFecFin );
LicDias =- &DiasHabiles IF after(LicFecFin ) ;
*/

NoAccept(LicDias) if &ModoLicencias = ModoLicencias.MILICENCIA;

Default(LicTpo , DMLicTpo.Tomada) ;
NoAccept(LicTpo) if &ModoLicencias = ModoLicencias.MILICENCIA;

Error('Los días que se toman deben ser negativos' ) IF LicDias > 0  and  LicTpo = DMLicTpo.Tomada ;
Error('Los días que se liquidan deben ser negativos' ) IF LicDias >= 0 AND LicTpo = DMLicTpo.Liquidada ;
Error('Los dias que se generan deben ser positivos' ) IF LicDias <= 0 AND LicTpo = DMLicTpo.Generada ;
//Error('El periodo de la ausencia no pueden estar en diferentes meses, debe partir el movimiento en dos' ) IF month(LicFecIni ) <> month(LicFecFin )  or  year(LicFecIni ) <> year(LicFecFin ) ;
Error('Imposible ingresar o modificar ausencias anteriores a la fecha de cierre') if LicFecIni <= &ParFchCrr ;

Msg('ATENCIÓN: Queda con saldo negativo de licencia. ') if insert and after(LicDias) and (RspSaldoLicenciaTomada + LicDias  < 0)  and RspVinculoLaboral = DMRspVinculoLaboral.EMPLEADO and LicTpo=DMLicTpo.Tomada;	//control antes de insertar movimiento
Msg('ATENCIÓN: Queda con saldo negativo de licencia. ') if RspSaldoFuturo <0 and RspVinculoLaboral = DMRspVinculoLaboral.EMPLEADO and LicTpo=DMLicTpo.Tomada;	//Autorizando lo pendiente, la licencia seguro será negativa y puede que ya sea negativo el saldo

&LicFecFin = LicFecFin if LicEst = EstadoLicencia.Autorizada and after(confirm);
&LicFecIni = LicFecIni if LicEst = EstadoLicencia.Autorizada and after(confirm);


Default(AusTpoId, DMAusTpoId.Licencia);
AusTpoId = DMAusTpoId.Licencia if (LicTpo = DMLicTpo.Generada or LicTpo=DMLicTpo.Liquidada) ;

Error('La fecha de inicio debe ser anterior a la fecha de fin') if LicFecIni > LicFecFin on AfterValidate;

&RspLicSuperpuesta = ControlLicenciaSuperpuesta(RspLicId, RspId, LicFecIni, LicFecFin, LicTpo) if (&Mode = TrnMode.Insert or &Mode = TrnMode.Update) on AfterValidate;
Error('Ya existe una licencia ingresada que se superpone con esta: ' + trim(str(&RspLicSuperpuesta))) if (&Mode = TrnMode.Insert or &Mode = TrnMode.Update) and &RspLicSuperpuesta > 0 on AfterValidate;

/* A pedido de RCARO se saca este control pues es una ausencia válida
Error('No se puede ingresar una ausencia tipo X para este responsable') 
	if (RspVinculoLaboral = DMRspVinculoLaboral.PROFESIONAL or RspVinculoLaboral = DMRspVinculoLaboral.SOCIO) and AusTpoId = DMAusTpoId.Examen; 
*/

Error('No se puede ingresar licencia que incluya un Feriado Especial (turismo,carnaval). Marque toda la semana que los incluya')
	if (LicenciaConFeriadoEspecial(LicFecIni,LicFecFin));


=== EVENTS SOURCE ===

Event Start

    &ParFchCrr = PMTParFch('PARFCHCRR')

    PFUsuHab.call('LICENCIAS',9,&vOk)//Seguridad

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */

	LoadWWPContext.Call(&WWPContext)
	
	&TrnContext.FromXml(&WebSession.Get(!"TrnContext"))
	If (&TrnContext.TransactionName = &Pgmname and &Mode = TrnMode.Insert)
		For &TrnContextAtt in &TrnContext.Attributes
			Do Case
				// When inserting with instantiated RspId
				Case &TrnContextAtt.AttributeName = !"RspId"
					&Insert_RspId.FromString(&TrnContextAtt.AttributeValue)
				// When inserting with instantiated RspAutId
				Case &TrnContextAtt.AttributeName = !"RspAutId"
					&Insert_RspAutId.FromString(&TrnContextAtt.AttributeValue)
				// When inserting with instantiated AusTpoId
				Case &TrnContextAtt.AttributeName = !"AusTpoId"
					&Insert_AusTpoId.FromString(&TrnContextAtt.AttributeValue)
			Endcase
		Endfor
	Endif

	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

	&ModoLicencias = &Session.Get('MODOLICENCIA')

EndEvent

Event After Trn

    if (&Mode = TrnMode.Insert or &Mode = TrnMode.Update) and LicTpo = 'T'
        if AusTipoLiquidacion = true
            PMailSolLic.call()
        else
            PMailLicTpoE.call(RspLicId)
        endif
    endif
    //	HLicRsp.call( RspId)

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */

	If (&Mode = TrnMode.Delete and not &TrnContext.CallerOnDelete)
		MOD_Licencia.WWLicencia.Call()
	Endif

	Return

	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

EndEvent

Event 'Eliminar'

    if &vOk = 'S'
        PBorRspLic.call(RspLicId)
        return
    else
        msg('No tiene permiso para eliminar licencias')
    endif

EndEvent




=== STRUCTURE ===
RspLicId*
RspId
LicFecIni
LicFecFin
LicDsc
LicDias
LicTpo
LicEst
RspAutId
RspAutVinculoLaboral
AusTpoId
AusTipoLiquidacion
RspVinculoLaboral
RspSaldoLicenciaTomada
RspSaldoFuturo


====== PROPERTIES =======
Name -> Licencia
Description -> Licencia por responsable 
MasterPage -> Artech.Genexus.Common.CustomTypes.WebPanelReference
Apply:07135890-56fc-489b-b408-063722fa9f7d -> True
FolderType -> c88fffcd-b6f8-0000-8fec-00b5497e2117
FolderId -> 11
ObjectVisibility -> Public
IsDefault -> False
